Given a non-empty array of integers, every element appears three times except for one, which appears exactly once. Find that single one.

Note:

Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?

Example 1:

Input: [2,2,3,2]
Output: 3
Example 2:

Input: [0,1,0,1,0,1,99]
Output: 99

思路:利用计算机按位存储，建立一个32位数字，因为某个元素只出现一次以外，其余每个元素均出现了三次
     所以统计每一位上1出现的个数，最后对3取余得到的结果即为出现一次的元素所在位的值，循环取出位后赋值给res

class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int res = 0;
        for (int i = 0; i < 32; ++i) {
            int sum = 0;
            for (int j = 0; j < nums.size(); ++j) {
                sum += (nums[j] >> i) & 1;     //&作用保留指定位的数（最后一位） >>右移
            }
            res |= (sum % 3) << i;         //| 设定res 的指定位    <<左移
         }
        return res;
    }
};

位运算学习：https://www.cnblogs.com/yanliang12138/p/4536189.html
