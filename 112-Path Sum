Given a binary tree and a sum, determine if the tree has a root-to-leaf path such that adding up all the values along the path equals the given sum.

Note: A leaf is a node with no children.

Example:

Given the below binary tree and sum = 22,

      5
     / \
    4   8
   /   / \
  11  13  4
 /  \      \
7    2      1
return true, as there exist a root-to-leaf path 5->4->11->2 which sum is 22.

思路：依旧是DFS，不停的找字节点的左右子节点，递归调用
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool hasPathSum(TreeNode* root, int sum) {
        if (root == NULL)   //空节点返回false
            return false;
        if (root->left == NULL && root->right == NULL && root->val == sum)   //叶子节点的值==sum
            return true;
        return hasPathSum(root->left,sum - root->val) || hasPathSum(root->right,sum - root->val);  //新的sum值应为原有的sum-当前节点的值
    }
};
