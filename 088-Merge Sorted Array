Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.

Note:

The number of elements initialized in nums1 and nums2 are m and n respectively.
You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2.
Example:

Input:
nums1 = [1,2,3,0,0,0], m = 3
nums2 = [2,5,6],       n = 3

Output: [1,2,2,3,5,6]

思路： 从最后面开始赋值，比较nums1 和 nums2最后一个元素，大的放在m+n-1位置，依次向前推，
如果nums1中元素都比nums2小则前m个还是nums1中原来位置，
如果还存在nums2直接覆盖到A剩下位置
class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int count = m + n - 1;
        --m; --n;
        while (m >= 0 && n >=0)
            nums1[count--] = nums1[m] > nums2[n] ? nums1[m--] : nums2[n--];
        while (n >=0)
            nums1[count--] = nums2[n--];
    }
};
