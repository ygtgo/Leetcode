Given a non-negative integer numRows, generate the first numRows of Pascal's triangle.
In Pascal's triangle, each number is the sum of the two numbers directly above it.

Example:

Input: 5
Output:
[
     [1],
    [1,1],
   [1,2,1],
  [1,3,3,1],
 [1,4,6,4,1]
]

思路：每一行首尾都是1，从第三行开始，中间的每个数字都是上一行的左右两个数字之和
class Solution {
public:
    vector<vector<int>> generate(int numRows) {
        vector<vector<int>> res;
        if (numRows <= 0)
            return res;
        res.assign(numRows,vector<int>(1));   //复制numrows个数组
        for (int i = 0; i < numRows; ++i) {
            res[i][0] = 1;   //首+1
            if(i == 0)
                continue;
            for (int j = 1; j < i; ++j){
                res[i].push_back(res[i-1][j] + res[i-1][j-1]);  //中间的每个数字都是上一行的左右两个数字之和
            }
            res[i].push_back(1); //尾+1
        }
        return res;
    }
};
