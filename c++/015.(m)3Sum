给定一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 a，b，c ，使得 a + b + c = 0 ？找出所有满足条件且不重复的三元组。

注意：答案中不可以包含重复的三元组。

例如, 给定数组 nums = [-1, 0, 1, 2, -1, -4]，

满足要求的三元组集合为：
[
  [-1, 0, 1],
  [-1, -1, 2]
]


class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> res;
        sort(nums.begin(),nums.end());            //先进行排序
        if(nums.empty() || nums.back() < 0 || nums.front() > 0) //开头大于0或结尾小于0 说明不存在相加之和为0
            return {};
        for(int k = 0; k < nums.size(); ++k){       //遍历
            if(nums[k] > 0)                         //第一个数大于0
                break;
            if(k > 0 && nums[k] == nums[k - 1])     //剪枝优化，跳过重复相等值避免二次选择同一个值作为target
                continue;
            int target = 0 - nums[k];               //取一个负数作为targert，后两个数相加与target相等则为一组
            int i = k + 1, j = nums.size() - 1;     //去两个数作为指针
            while(i < j){
                if(nums[i] + nums[j] == target){     //相等情况
                    res.push_back({nums[k], nums[i], nums[j]});
                    while(i < j && nums[i] == nums[i + 1]) ++i;  //跳过重复值
                    while(i < j && nums[j] == nums[j - 1]) --j;  //跳过重复值
                    ++i; --j;
                }else if(nums[i] + nums[j] < target) ++i;     //根据相加之和与taget比较大小，移动指针
                else --j;
            }
        }
        return res;
    }
};
