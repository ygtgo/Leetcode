You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example:

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode *res = new ListNode(-1);   //初始化结点
        ListNode *cur = res;       //相当于 ListNode *cur; cur = res;
        int carry = 0;
        while(l1 || l2){
            int n1 = l1 ? l1->val:0;
            int n2 = l2 ? l2->val:0;
            int sum = n1 + n2 + carry;
            carry = sum/10; //进位
            cur->next = new ListNode(sum % 10); //初始化下个节点
            cur = cur->next; //cur 指向下个节点的地址
            if(l1) l1 = l1->next;  // 下一个节点
            if(l2) l2 = l2->next;
        }
        if(carry) cur->next = new ListNode(1);
        return res->next;
        
    }
};
