Given a string, find the length of the longest substring without repeating characters.

Example 1:

Input: "abcabcbb"
Output: 3 
Explanation: The answer is "abc", which the length is 3.
Example 2:

Input: "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3. 
             Note that the answer must be a substring, "pwke" is a subsequence and not a substring.

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        vector<int> m(256,-1);   //HashMap建立字符和其出现位置之间的映射
        int res = 0,left  = -1;  //left为左边界
        for(int i = 0; i < s.size(); ++i ){
            left = max(left, m[s[i]]);  //更新左边界   abbca
            m[s[i]] = i;     //更新字符出现的位置
            res = max(res,i - left );  //更新最大窗口长度 如果遇到未出现过的字符+1，如果遇到出现过的字符，
                                       // 则根据是否在窗口内加入
        }
        return res;
    }
};
