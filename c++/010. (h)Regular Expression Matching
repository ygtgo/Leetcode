
给定一个字符串 (s) 和一个字符模式 (p)。实现支持 '.' 和 '*' 的正则表达式匹配。

'.' 匹配任意单个字符。
'*' 匹配零个或多个前面的元素。
匹配应该覆盖整个字符串 (s) ，而不是部分字符串。

说明:

s 可能为空，且只包含从 a-z 的小写字母。
p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。
示例 1:

输入:
s = "aa"
p = "a"
输出: false
解释: "a" 无法匹配 "aa" 整个字符串。
示例 2:

输入:
s = "aa"
p = "a*"
输出: true
解释: '*' 代表可匹配零个或多个前面的元素, 即可以匹配 'a' 。因此, 重复 'a' 一次, 字符串可变为 "aa"。
示例 3:

输入:
s = "ab"
p = ".*"
输出: true
解释: ".*" 表示可匹配零个或多个('*')任意字符('.')。
示例 4:

输入:
s = "aab"
p = "c*a*b"
输出: true
解释: 'c' 可以不被重复, 'a' 可以被重复一次。因此可以匹配字符串 "aab"。
示例 5:

输入:
s = "mississippi"
p = "mis*is*p*."
输出: false




class Solution {
public:
    bool isMatch(string s, string p) {
        if(p.empty())      
            return s.empty();  //若P为空，若s也为空，返回true，否则false
        if(p.size() == 1){   
            return (s.size() == 1 && (s[0] == p[0] || p[0] == '.'));  //若p长度为1，s长度也为1，且相同或是p为‘.’,则返回true，否则false
        }
        if(p[1] != '*'){      //若p的第二个字符不为* ，若此时s为空返回false，否则判断首字符是否匹配，且从各自的第二个字符开始调用递归函数匹配
            if(s.empty())
                return false;
            return (s[0] == p[0] || p[0] == '.') && isMatch(s.substr(1),p.substr(1));
        }
        while(!s.empty() && (s[0] == p[0] || p[0] == '.')){     //若p的第二个字符为* 且s不为空 且首字符匹配
            if(isMatch(s,p.substr(2)))   //递归调用函数匹配s和去掉前两个字符的p  （这样做的原因是假设此时的星号的作用是让前面的字符出现0次，验证是否匹配），若匹配返回true，否则s去掉首字母（因为此时首字母匹配了，我们可以去掉s的首字母，而p由于星号的作用，可以有任意个首字母，所以不需要去掉），继续进行循环
                return true;
            s = s.substr(1);
        }
        return isMatch(s,p.substr(2));//返回调用递归函数匹配s和去掉前两个字符的p的结果（这么做的原因是处理星号无法匹配的内容，比如s="ab", p="a*b"，直接进入while循环后，我们发现"ab"和"b"不匹配，所以s变成"b"，那么此时跳出循环后，就到最后的return来比较"b"和"b"了，返回true。再举个例子，比如s="", p="a*"，由于s为空，不会进入任何的if和while，只能到最后的return来比较了，返回true，正确）。
    }
};
